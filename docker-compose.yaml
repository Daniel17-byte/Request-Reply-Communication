
networks:
  my-network:
    driver: bridge

volumes:
  db_users_data:
  db_devices_data:
  db_monitoring_data:
  rabbitmq_data:

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbit-mq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - my-network

  monitoring-communication:
    build:
      context: ./monitoring-communication
      dockerfile: Dockerfile
    container_name: monitoring
    ports:
      - "8083:8080"
#    deploy:
#      replicas: 3
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db_monitoring:3306/monitoring
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
    depends_on:
      - rabbitmq
      - db_monitoring
    networks:
      - my-network

  users:
    build:
      context: ./users
      dockerfile: Dockerfile
#    container_name: users
#    ports:
#      - "8081:8080"
    deploy:
      replicas: 3
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db_users:3306/users
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_DEFAULT_USER}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
    depends_on:
      - db_users
      - rabbitmq
    networks:
      - my-network

  devices:
    build:
      context: ./devices
      dockerfile: Dockerfile
    container_name: devices
    ports:
      - "8082:8080"
#    deploy:
#      replicas: 3
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db_devices:3306/devices
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    depends_on:
      - db_devices
    networks:
      - my-network

  chat:
    build:
      context: ./chat
      dockerfile: Dockerfile
    container_name: chat
    ports:
      - "8084:8080"
    networks:
      - my-network

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: client
    ports:
      - "3000:3000"
    depends_on:
      - users
      - devices
    networks:
      - my-network

  db_users:
    image: mysql:8.0.4
    platform: linux/amd64
    container_name: db_users
    environment:
      MYSQL_DATABASE: users
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - db_users_data:/var/lib/mysql
    networks:
      - my-network

  db_devices:
    image: mysql:8.0.4
    platform: linux/amd64
    container_name: db_devices
    environment:
      MYSQL_DATABASE: devices
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "3308:3306"
    volumes:
      - db_devices_data:/var/lib/mysql
    networks:
      - my-network

  db_monitoring:
    image: mysql:8.0.4
    platform: linux/amd64
    container_name: db_monitoring
    environment:
      MYSQL_DATABASE: monitoring
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "3309:3306"
    volumes:
      - db_monitoring_data:/var/lib/mysql
    networks:
      - my-network

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - users
      - devices
      - monitoring-communication
    networks:
      - my-network

  api-gateway:
    image: springcloud/spring-cloud-gateway:latest
    build:
      context: ./api-gateway
    container_name: gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_CLOUD_GATEWAY_ROUTES: |
        - id: users
          uri: http://users:8080
          predicates:
            - Path=/api/users/**
        - id: devices
          uri: http://devices:8080
          predicates:
            - Path=/api/devices/**
    depends_on:
      - users
      - devices
    networks:
      - my-network